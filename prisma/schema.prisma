generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION_URI")
}

model Instance {
  id        String   @id @default(uuid())
  name      String
  phone     String
  status    String
  webhook   String?
  token     String?
  number    String?
  clientName String?
  connectionStatus String?
  ownerJid  String?
  businessId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Session             Session[]
  Contact             Contact[]
  Chat                Chat[]
  Message             Message[]
  MessageUpdate       MessageUpdate[]
  Webhook             Webhook[]
  Template            Template[]
  IntegrationSession  IntegrationSession[]
  Typebot             Typebot[]
  Chatwoot            Chatwoot[]
  Proxy               Proxy?
  Setting             Setting?
  Label               Label[]
  OpenaiBot           OpenaiBot[]
  Dify                Dify[]
  EvolutionBot        EvolutionBot[]
  Flowise             Flowise[]
}

model Session {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Contact {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  name       String
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Chat {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  name       String
  messages   Message[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  chatId     String
  sender     String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MessageUpdate {
  id         String   @id @default(uuid())
  messageId  String
  updated    Boolean
  createdAt  DateTime @default(now())
}

model Webhook {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  url        String
  event      String
  createdAt  DateTime @default(now())
}

model Template {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  name       String
  content    String
  createdAt  DateTime @default(now())
}

model IntegrationSession {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  provider   String
  data       Json
  createdAt  DateTime @default(now())
}

model Typebot {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  config     Json
  createdAt  DateTime @default(now())
}

model Chatwoot {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  contactId  String
  createdAt  DateTime @default(now())
}

model Proxy {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  host       String
  port       Int
  createdAt  DateTime @default(now())
}

model Setting {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  config     Json
  createdAt  DateTime @default(now())
}

model Label {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  name       String
  createdAt  DateTime @default(now())
}

model OpenaiBot {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  model      String
  creds      Json
  setting    Json
}

model Dify {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  setting    Json
}

model EvolutionBot {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  setting    Json
}

model Flowise {
  id         String   @id @default(uuid())
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  setting    Json
}
